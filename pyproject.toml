[tool.poetry]
name = "Minecraft-Mod-Downloader"
version = "0.0.2"
license = "Apache-2.0"
description = "A Python helper script to load a set of mods from a local mods-list"
authors = ["CarrotManMatt <matt@carrotmanmatt.com>"]
repository = "https://github.com/CarrotManMatt/Minecraft-Mod-Downloader.git"
keywords = ["minecraft", "mods", "fabric", "forge", "quilt", "modrinth", "quilt", "java"]
classifiers = [
    "Private :: Do Not Upload",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: End Users/Desktop",
    "Typing :: Typed",
    "Topic :: Games/Entertainment"
]
packages = [{include = "minecraft_mod_downloader"}]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
install-minecraft-mods = "minecraft_mod_downloader.console:run"

[tool.poetry.dependencies]
python = "^3.12"
python-dotenv = "^1.0"
pathvalidate = "^3.2"
identify = "^2.5"
django = "~5.0"
httpx = "^0.25"
aiopath = "^0.7"

[tool.poetry.group.dev.dependencies]
mypy = "~1.7"
django-stubs = {extras = ["compatible-mypy"], version = "~4.2"}
ruff = "^0.1"
setuptools = "*"  # NOTE: Required by Pycharm

[tool.django-stubs]
django_settings_module = "minecraft_mod_downloader.models._settings"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
exclude = "db/settings\\.py$"
extra_checks = true
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
ignore_missing_imports = true
warn_unreachable = true

[tool.ruff]
select = [
    "E",
    "F",
    "W",
    "C",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "DTZ",
    "T",
    "DJ",
    "EM",
    "G",
    "INP",
    "PIE",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "TD",
    "FIX",
    "ERA",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    "PERF",
    "RUF"
]
ignore = [
    "N818",
    "N806",
    "D203",
    "D212",
    "ANN101",
    "ANN102",
    "ANN401",
    "S101",
    "S311",
    "COM812",
    "Q003",
    "TD002",
    "TD003",
    "PLR0911",
    "PLR0915",
    "TRY400"
]
line-length = 95
fixable = ["I001", "TCH", "F401", "RUF100"]
target-version ="py312"
task-tags = [
    "TODO",
    "FIXME",
    "HACK",
    "BUG",
    "NOBUG",
    "REQ",
    "IDEA",
    "NOTE",
    "ISSUE"
]
extend-exclude = [".idea", ".mypy_cache", ".ruff_cache", "__pycache__", "migrations"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 95

[tool.ruff.lint.pylint]
allow-magic-value-types = []
max-args = 7
max-branches = 10

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
